import os
import logging
from aiogram import Bot, Dispatcher, types
from aiogram.utils import executor
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from dotenv import load_dotenv
from uuid import uuid4
from collections import defaultdict
from datetime import datetime
import pytz
import sys
import io

sys.stdout = io.TextIOWrapper(sys.stdout.buffer, encoding='utf-8')


logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.StreamHandler(sys.stdout)
    ]
)

load_dotenv()

API_TOKEN = os.getenv('BOT_TOKEN')
GROUP_ID = os.getenv('GROUP_ID')

requests_db = {}
leaders_stats = defaultdict(int)
user_names = {}


if not API_TOKEN or not GROUP_ID:
    raise ValueError("–ê–±–æ–±–∞ —Ç—ã –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–µ –¥–æ–±–∞–≤–∏–ª –≥–µ–Ω–∏—É—Å!")

bot = Bot(token=API_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

class RequestStates(StatesGroup):
    waiting_for_request = State()

@dp.message_handler(commands=['start'])
async def send_welcome(message: types.Message):
    await message.reply(f"üöÄ –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {message.from_user.full_name}!\n\n–í—ã –≤ –ú–æ—Å–∫–≤–µ, –∞ –∑–Ω–∞—á–∏—Ç ‚Äî —Å—Ä–µ–¥–∏ –¥—Ä—É–∑–µ–π!\n–≠—Ç–æ—Ç –±–æ—Ç —Å–æ–∑–¥–∞–Ω, —á—Ç–æ–±—ã —É—á–∞—Å—Ç–Ω–∏–∫–∏ –õ–† –º–æ–≥–ª–∏:  \n‚Ä¢ –ë—ã—Å—Ç—Ä–æ –ø–æ–ª—É—á–∏—Ç—å –ø–æ–º–æ—â—å –≤ —Å—Ç–æ–ª–∏—Ü–µ\n‚Ä¢ –ù–∞–π—Ç–∏ —Å–æ–ø—Ä–æ–≤–æ–∂–¥–∞—é—â–µ–≥–æ –∏–∑ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞\n‚Ä¢ –û–±–º–µ–Ω—è—Ç—å—Å—è –ø–æ–ª–µ–∑–Ω—ã–º–∏ –∫–æ–Ω—Ç–∞–∫—Ç–∞–º–∏\n\n‚ñ∂Ô∏è –ù–∞–ø–∏—à–∏—Ç–µ, —á–µ–º –≤–∞–º –ø–æ–º–æ—á—å, –∏–ª–∏ –ø–æ—Å–º–æ—Ç—Ä–∏—Ç–µ /help.")

@dp.message_handler(commands=['request'])
async def start_request(message: types.Message):
    example_request = """üìã –ü—Ä–∏–º–µ—Ä –∑–∞–ø—Ä–æ—Å–∞:
    
–î–∞—Ç–∞: 25 –º–∞—è 2024
–í—Ä–µ–º—è: 14:00-17:00
–¶–µ–ª—å: –í—Å—Ç—Ä–µ—á–∞ —Å –ø–∞—Ä—Ç–Ω–µ—Ä–∞–º–∏
–ù—É–∂–Ω–∞ –ø–æ–º–æ—â—å: –õ–æ–≥–∏—Å—Ç–∏–∫–∞ –¥–æ –º–µ—Å—Ç–∞ –≤—Å—Ç—Ä–µ—á–∏
–§–æ—Ä–º–∞—Ç —Å–æ–ø—Ä–æ–≤–æ–∂–¥–µ–Ω–∏—è: –ì–∏–¥ –Ω–∞ 2 —á–∞—Å–∞

‚úèÔ∏è –ü—Ä–∏—à–ª–∏—Ç–µ –≤–∞—à –∑–∞–ø—Ä–æ—Å –≤ –∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ"""
    
    await message.reply(example_request)
    await RequestStates.waiting_for_request.set()

@dp.message_handler(state=RequestStates.waiting_for_request)
async def handle_request(message: types.Message, state: FSMContext):
    try:
        user_id = message.from_user.id
        request_text = message.text
        request_id = str(uuid4())
        
        requests_db[request_id] = {
            'user_id': user_id,
            'request_text': request_text,
            'username': message.from_user.username,
            'active': True
        }

        keyboard = InlineKeyboardMarkup()
        accept_button = InlineKeyboardButton(
            text="‚úÖ –ü—Ä–∏–Ω—è—Ç—å –∑–∞–ø—Ä–æ—Å",
            callback_data=f"accept|{request_id}"
        )
        keyboard.add(accept_button)

        try:
            group_message = await bot.send_message(
                chat_id=GROUP_ID,
                text=f"üö® –ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –æ—Ç @{message.from_user.username}:\n\n{request_text}",
                reply_markup=keyboard
            )
            requests_db[request_id]['group_message_id'] = group_message.message_id
            logger.info(f"–ó–∞–ø—Ä–æ—Å {request_id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –≥—Ä—É–ø–ø—É")
            
        except Exception as group_error:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –≥—Ä—É–ø–ø—É: {group_error}")
            await message.reply("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            return
        
        await message.reply("‚úÖ –í–∞—à –∑–∞–ø—Ä–æ—Å –ø—Ä–∏–Ω—è—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ —Å–æ–æ–±—â–µ—Å—Ç–≤–æ! –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–∫–ª–∏–∫–æ–≤.")
        await state.finish()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞: {e}")
        await message.reply("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞")

@dp.callback_query_handler(lambda c: c.data.startswith('accept|'))
async def handle_accept(callback_query: types.CallbackQuery):
    try:
        request_id = callback_query.data.split('|', 1)[1]
        request_data = requests_db.get(request_id)
        
        if not request_data or not request_data.get('active'):
            await callback_query.answer("–ó–∞–ø—Ä–æ—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            return


        helper_id = callback_query.from_user.id
        leaders_stats[helper_id] += 1
        user_names[helper_id] = callback_query.from_user.username
        requests_db[request_id]['active'] = False

        await bot.send_message(
            chat_id=request_data['user_id'],
            text=f"üéâ –í–∞—à –∑–∞–ø—Ä–æ—Å –ø—Ä–∏–Ω—è–ª @{callback_query.from_user.username}!\n\n" 
                 f"–°–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∏–º –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π: @{callback_query.from_user.username}"
        )
        
        try:
            await bot.edit_message_reply_markup(
                chat_id=GROUP_ID,
                message_id=request_data['group_message_id'],
                reply_markup=None
            )
        except Exception as edit_error:
            logger.error(f"–û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {edit_error}")

        del requests_db[request_id]
        
        await callback_query.answer("–í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–Ω—è–ª–∏ –∑–∞–ø—Ä–æ—Å!")
        logger.info(f"–ó–∞–ø—Ä–æ—Å {request_id} –ø—Ä–∏–Ω—è—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º @{callback_query.from_user.username}")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–∏–Ω—è—Ç–∏—è: {e}")
        await callback_query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")

@dp.message_handler(commands=['leaders'])
async def show_leaders(message: types.Message):
    try:
        sorted_leaders = sorted(
            leaders_stats.items(),
            key=lambda x: x[1],
            reverse=True
        )[:5]

        if not sorted_leaders:
            await message.reply("üèÜ –†–µ–π—Ç–∏–Ω–≥ –ø–æ–∫–∞ –ø—É—Å—Ç. –ë—É–¥—å—Ç–µ –ø–µ—Ä–≤—ã–º!")
            return

        leaderboard = "üèÜ –¢–æ–ø –ø–æ–º–æ—â–Ω–∏–∫–æ–≤ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞:\n\n"
        for idx, (user_id, count) in enumerate(sorted_leaders, 1):
            username = user_names.get(user_id, '–ê–Ω–æ–Ω–∏–º')
            leaderboard += (
                f"{idx}. @{username}\n"
                f"   –ü—Ä–∏–Ω—è—Ç–æ –∑–∞–ø—Ä–æ—Å–æ–≤: {count}\n"
                f"   {'‚≠ê' * min(count, 5)}\n\n"
            )

        await message.reply(leaderboard)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–µ–π—Ç–∏–Ω–≥–∞: {e}")
        await message.reply("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–π—Ç–∏–Ω–≥")


@dp.message_handler(commands=['help'])
async def send_help(message: types.Message):
    await message.reply(f"""üìå –ü–æ–º–æ—â—å –ø–æ –±–æ—Ç—É ¬´–î–µ–∂—É—Ä–Ω—ã–π –ø–æ –ú–æ—Å–∫–≤–µ¬ª

    –Ø –ø–æ–º–æ–≥–∞—é —É—á–∞—Å—Ç–Ω–∏–∫–∞–º —Å–æ–æ–±—â–µ—Å—Ç–≤–∞ ¬´–õ–∏–¥–µ—Ä—ã –†–æ—Å—Å–∏–∏¬ª –±—ã—Å—Ç—Ä–æ –Ω–∞—Ö–æ–¥–∏—Ç—å –ø–æ–¥–¥–µ—Ä–∂–∫—É –≤ —Å—Ç–æ–ª–∏—Ü–µ. –í–æ—Ç —á—Ç–æ —è —É–º–µ—é:

    üîπ –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
    /start ‚Äî –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º
    /help ‚Äî –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
    /time ‚Äî –ü–æ–∫–∞–∑–∞—Ç—å –≤—Ä–µ–º—è –≤ –ú–æ—Å–∫–≤–µ
    /request ‚Äî –û—Å—Ç–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–º–æ—â—å (–≥–∏–¥, –≤—Å—Ç—Ä–µ—á–∞, —Å–æ–≤–µ—Ç—ã)
    /leaders ‚Äî –†–µ–π—Ç–∏–Ω–≥ –≤–æ–ª–æ–Ω—Ç–µ—Ä–æ–≤
    /contacts ‚Äî –ü–æ–ª–µ–∑–Ω—ã–µ –∫–æ–Ω—Ç–∞–∫—Ç—ã —Å–æ–æ–±—â–µ—Å—Ç–≤–∞ –≤ –ú–æ—Å–∫–≤–µ

    üîπ –ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç?

    –í—ã –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç–µ –∑–∞–ø—Ä–æ—Å —á–µ—Ä–µ–∑ /request (–Ω–∞–ø—Ä–∏–º–µ—Ä: ¬´–ù—É–∂–µ–Ω —Å–æ–ø—Ä–æ–≤–æ–∂–¥–∞—é—â–∏–π 25 –º–∞—è –Ω–∞ –≤—Å—Ç—Ä–µ—á—É –≤ –ú–ì–£¬ª).

    –Ø –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–∞—à–∏–≤–∞—é –º–æ—Å–∫–æ–≤—Å–∫–∏—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –õ–†.

    –ö–∞–∫ —Ç–æ–ª—å–∫–æ –Ω–∞–π–¥–µ—Ç—Å—è –¥–æ–±—Ä–æ–≤–æ–ª–µ—Ü ‚Äî –≤—ã –ø–æ–ª—É—á–∏—Ç–µ –µ–≥–æ –∫–æ–Ω—Ç–∞–∫—Ç—ã –¥–ª—è —Å–≤—è–∑–∏.

    ü§ù –í–∞–∂–Ω–æ:
    ‚Ä¢ –í—Å–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏ –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã —Å–æ–æ–±—â–µ—Å—Ç–≤–æ–º.
    ‚Ä¢ –ë–æ—Ç –ª–∏—à—å —Å–æ–µ–¥–∏–Ω—è–µ—Ç –≤–∞—Å ‚Äî –¥–µ—Ç–∞–ª–∏ –æ–±—Å—É–∂–¥–∞—é—Ç—Å—è –ª–∏—á–Ω–æ.

    –ü—Ä–∏–º–µ—Ä –∑–∞–ø—Ä–æ—Å–∞:
    ¬´–ò—â—É –≥–∏–¥–∞ –ø–æ –¥–µ–ª–æ–≤–æ–º—É —Ü–µ–Ω—Ç—Ä—É ‚Äú–ú–æ—Å–∫–≤–∞-–°–∏—Ç–∏‚Äù 30 –º–∞—è —Å 14:00 –¥–æ 17:00¬ª""")

@dp.message_handler(commands=['contacts'])
async def send_contacts(message: types.Message):
    await message.reply(f"""–ê–≤—Ç–æ–Ω–æ–º–Ω–∞—è –Ω–µ–∫–æ–º–º–µ—Ä—á–µ—Å–∫–∞—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è ¬´–†–æ—Å—Å–∏—è ‚Äì —Å—Ç—Ä–∞–Ω–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π¬ª

    –ú–µ—Å—Ç–æ –Ω–∞—Ö–æ–∂–¥–µ–Ω–∏—è —é—Ä–∏–¥–∏—á–µ—Å–∫–æ–≥–æ –ª–∏—Ü–∞: –≥–æ—Ä–æ–¥ –ú–æ—Å–∫–≤–∞

    –ê–¥—Ä–µ—Å —é—Ä–∏–¥–∏—á–µ—Å–∫–æ–≥–æ –ª–∏—Ü–∞: 109004, –ì–æ—Ä–æ–¥ –ú–æ—Å–∫–≤–∞, –≤–Ω. —Ç–µ—Ä. –≥. –º—É–Ω–∏—Ü–∏–ø–∞–ª—å–Ω—ã–π –æ–∫—Ä—É–≥ –¢–∞–≥–∞–Ω—Å–∫–∏–π, —É–ª. –°—Ç–∞–Ω–∏—Å–ª–∞–≤—Å–∫–æ–≥–æ, –¥. 21, —Å—Ç—Ä. 3, –ø–æ–º–µ—â. I, –∫–æ–º. 70

    –ü–æ—á—Ç–æ–≤—ã–π –∞–¥—Ä–µ—Å: 123112, –≥. –ú–æ—Å–∫–≤–∞, –∞/—è 100

    –û–ì–†–ù 1187700010464
    –ò–ù–ù 9710063040 / –ö–ü–ü 770901001
    –û–ö–ü–û 29751572

    –ë–∞–Ω–∫–æ–≤—Å–∫–∏–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã:
    –ë–∞–Ω–∫: –ü–ê–û –°–ë–ï–†–ë–ê–ù–ö –ì. –ú–û–°–ö–í–ê
    –†/—Å 40703810738000009735
    –ö/—Å 30101810400000000225
    –ë–ò–ö 044525225

    E-mail: info@rsv.ru
    —Ç–µ–ª.: 8 (495) 198-88-92""")

@dp.message_handler(commands=['time'])
async def show_moscow_time(message: types.Message):
    try:
        moscow_tz = pytz.timezone('Europe/Moscow')
        current_time = datetime.now(moscow_tz)

        formatted_time = current_time.strftime(
            "–¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ –ú–æ—Å–∫–≤–µ:\n"
            "%H:%M:%S\n"
            "–î–∞—Ç–∞: %d.%m.%Y"
        )

        await message.reply(f"üïí {formatted_time} üìÖ")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏: {str(e).encode('utf-8')}")
        await message.reply("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≤—Ä–µ–º—è")

if __name__ == '__main__':
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    executor.start_polling(dp, skip_updates=True)